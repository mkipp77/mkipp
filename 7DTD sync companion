<#
.SYNOPSIS
    Instalador y configurador autom√°tico para 7DTD Sync Companion. (Versi√≥n Final v4)
    Crea la estructura en Dropbox, configura scripts y Launcher de forma robusta.
.DESCRIPTION
    Este script realiza todos los pasos para configurar 7DTD Sync Companion:
    1.  Verifica y eleva sus propios permisos a Administrador si es necesario.
    2.  Verifica y ajusta la pol√≠tica de ejecuci√≥n de PowerShell (manejando todos los errores de forma no bloqueante).
    3.  Pide al usuario que seleccione su carpeta principal de Dropbox (o la detecta) y valida la ruta.
    4.  Pide al usuario que seleccione la PARTIDA de 7DTD a sincronizar (detecta anidamiento de forma robusta).
    5.  Crea la estructura de carpetas necesarias en Dropbox.
    6.  Genera los archivos 7DTD-Sync.ps1, 7DTD-Sync.ini y Launcher.bat.
.NOTES
    Este script solicitar√° permisos de Administrador autom√°ticamente si no se ejecuta con ellos.
#>

# ==============================================================================
# L√≥gica de Elevaci√≥n Autom√°tica a Administrador
# ==============================================================================
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Este script necesita permisos de Administrador para funcionar correctamente." -ForegroundColor Yellow
    Write-Host "Se relanzar√° autom√°ticamente con privilegios elevados. Por favor, acepta la solicitud UAC." -ForegroundColor Yellow
    Start-Sleep -Seconds 2
    $Process = New-Object System.Diagnostics.ProcessStartInfo
    $Process.FileName = "powershell.exe"
    $Process.Arguments = "-NoProfile -ExecutionPolicy Bypass -File "$MyInvocation.MyCommand.Path""
    $Process.Verb = "RunAs"
    try { [System.Diagnostics.Process]::Start($Process) | Out-Null } catch {
        Write-Host "Error al intentar relanzar el script con permisos de Administrador." -ForegroundColor Red
        Read-Host "Presiona Enter para salir."
        exit 1
    }
    exit
}
# ==============================================================================

# --- Bloques de C√≥digo de los Scripts Internos (Minimizados para legibilidad) ---

$7DTD_Sync_PS1_Content = @"
<# 7DTD-Sync.ps1 v2.21 #>
param([ValidateSet("pull","push")][string]$OverrideDirection)
$ScriptRoot=Split-Path -Parent $MyInvocation.MyCommand.Definition;$iniPath=Join-Path $ScriptRoot '7DTD-Sync.ini';if(-not(Test-Path $iniPath)){Write-Error "Falta INI: $iniPath";exit 1};$cfg=Get-Content $iniPath|ConvertFrom-StringData -Delimiter '=';$GameSavesRoot=Join-Path $env:APPDATA '7DaysToDie\Saves';$GameGenRoot=Join-Path $env:APPDATA '7DaysToDie\GeneratedWorlds';$PartidaName=$cfg.GameName;$CloudRoot=$cfg.CloudDir;$LocalPartidaFullPath=Get-ChildItem -Path $GameSavesRoot -Recurse -Directory -Filter "$PartidaName" -ErrorAction SilentlyContinue|Where-Object{$_.PSIsContainer -and(Test-Path(Join-Path $_.FullName "main.ttw"))}|Select-Object -First 1;if($LocalPartidaFullPath){$MundoPadreName=$LocalPartidaFullPath.Parent.Name}else{Write-Host "Advertencia: No se pudo detectar el mundo padre local para '$PartidaName'. Asumiendo que el mundo tambi√©n se llama '$PartidaName'." -ForegroundColor Yellow;$MundoPadreName=$PartidaName};$LocalPartidaDir=Join-Path(Join-Path $GameSavesRoot $MundoPadreName)$PartidaName;$CloudPartidaDir=Join-Path(Join-Path(Join-Path $CloudRoot 'Saves')$MundoPadreName)$PartidaName;$LocalMundoGenDir=Join-Path $GameGenRoot $MundoPadreName;$CloudMundoGenDir=Join-Path(Join-Path $CloudRoot 'GeneratedWorlds')$MundoPadreName;$BackupDir=Join-Path $CloudRoot 'Backups';$LogFile=Join-Path $CloudRoot '7DTD-Sync.log';$MaxBackups=7;function Write-Log($msg){"$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss'))	$msg"|Out-File -FilePath $LogFile -Append -Encoding utf8;Write-Host $msg};$LockFile=Join-Path $CloudRoot '.sync.lock';while(Test-Path $LockFile){Write-Log "Otro equipo sincronizando, esperando 5s‚Ä¶";Start-Sleep 5};New-Item -ItemType File -Path $LockFile -Force|Out-Null;try{foreach($p in @($CloudPartidaDir,$CloudMundoGenDir,$BackupDir,$LocalPartidaDir.Parent.FullName,$LocalMundoGenDir)){if(-not(Test-Path $p)){New-Item -ItemType Directory -Path $p -Force|Out-Null}};Write-Log "Verificando estado de la partida '$PartidaName' en la nube (Mundo: '$MundoPadreName')...";$CloudPartidaMainTTW=Join-Path $CloudPartidaDir "main.ttw";$LocalPartidaMainTTW=Join-Path $LocalPartidaDir "main.ttw";if(-not(Test-Path $CloudPartidaMainTTW)){if(Test-Path $LocalPartidaMainTTW){Write-Log "Partida '$PartidaName' encontrada localmente. Copiando a la nube por primera vez (Push Inicial)...";robocopy $LocalPartidaDir $CloudPartidaDir /E /R:3 /W:5 /NP /NFL /NDL /LOG+:"$LogFile"|Out-Null;robocopy $LocalMundoGenDir $CloudMundoGenDir /E /R:3 /W:5 /NP /NFL /NDL /LOG+:"$LogFile"|Out-Null;Write-Log "Inicializaci√≥n completada."}else{Write-Log "ERROR: La partida '$PartidaName' NO existe ni en la nube ni localmente.";exit 1}}else{Write-Log "Partida '$PartidaName' ya existe en la nube."};if($OverrideDirection){$direction=$OverrideDirection}else{$localInfo=Get-ItemProperty -Path $LocalPartidaMainTTW -ErrorAction SilentlyContinue;$cloudInfo=Get-ItemProperty -Path $CloudPartidaMainTTW -ErrorAction SilentlyContinue;if($localInfo -and $cloudInfo){$direction=if($cloudInfo.LastWriteTime -ge $localInfo.LastWriteTime){'pull'}else{'push'}}elseif($localInfo){$direction='push'}elseif($cloudInfo){$direction='pull'}else{Write-Log "No existe main.ttw. Abortando.";return}};Write-Log "Operaci√≥n elegida: $direction";if($direction -eq 'pull'){Write-Log "‚¨áÔ∏è Pull Partida y Mundo: clonando nube ‚Üí local";robocopy $CloudPartidaDir $LocalPartidaDir /MIR /FFT /R:2 /W:2 /NFL /NDL /NP|Out-Null;robocopy $CloudMundoGenDir $LocalMundoGenDir /MIR /FFT /R:2 /W:2 /NFL /NDL /NP|Out-Null}else{$ts=Get-Date -Format 'yyyyMMdd-HHmmss';$zip=Join-Path $BackupDir "partida-$PartidaName-push-$ts.zip";Write-Log "üîÑ Backup Partida antes de push: $zip";Compress-Archive -Path "$LocalPartidaDir\*" -DestinationPath $zip -Force;Get-ChildItem $BackupDir -Filter "partida-$PartidaName-push-*.zip"|Sort-Object LastWriteTime -Desc|Select-Object -Skip $MaxBackups|Remove-Item -Force;Write-Log "‚¨ÜÔ∏è Push Partida y Mundo: clonando local ‚Üí nube";robocopy $LocalPartidaDir $CloudPartidaDir /E /FFT /R:2 /W:2 /NFL /NDL /NP|Out-Null;robocopy $LocalMundoGenDir $CloudMundoGenDir /E /FFT /R:2 /W:2 /NFL /NDL /NP|Out-Null;Write-Log "Push completado."};Write-Log "‚úÖ Sincronizaci√≥n de la partida '$PartidaName' (Mundo: '$MundoPadreName') finalizada."}finally{Remove-Item $LockFile -Force}
"@

$Launcher_BAT_Content = @"
@echo off
REM Launcher.bat ‚Äì Pull -> Lanzar -> Push
set "INI_PATH=%~dp0\7DTD-Sync.ini"
for /f "usebackq tokens=1,* delims==" %%A in (`findstr /B /I "GameName" "%INI_PATH%"`) do set "GameName=%%~B"
set "PS1_PATH=%~dp0\7DTD-Sync.ps1"
echo [1/3] Sincronizando (Pull) la partida %GameName% desde la nube...
powershell -NoProfile -ExecutionPolicy Bypass -File "%PS1_PATH%" pull
echo.
echo [2/3] Abriendo 7 Days to Die por Steam‚Ä¶
start "" "steam://run/251570"
timeout /t 5 >nul
echo [3/3] Esperando a que cierres el juego para guardar tu progreso en la nube...
:WAIT_LOOP
    timeout /t 10 >nul
    tasklist /FI "IMAGENAME eq 7DaysToDie.exe" | find /I "7DaysToDie.exe" >nul
    if %errorlevel%==0 goto WAIT_LOOP
echo.
echo [4/3] Sincronizando (Push) la partida %GameName% hacia la nube...
powershell -NoProfile -ExecutionPolicy Bypass -File "%PS1_PATH%" push
echo.
echo Sincronizacion completada.
timeout /t 5
exit /b
"@

# --- Funciones de Utilidad del Instalador ---

function Write-Host-Color { param([string]$Message, [ConsoleColor]$Color="White"); Write-Host $Message -ForegroundColor $Color }

function DetectDropboxRootPath {
    $potentialPaths = @((Join-Path $env:APPDATA "Dropbox"), (Join-Path $env:LOCALAPPDATA "Dropbox"), (Join-Path $env:USERPROFILE "Dropbox"))
    foreach ($path in $potentialPaths) {
        if (Test-Path (Join-Path $path "info.json")) {
            try { $personalPath = (Get-Content (Join-Path $path "info.json") | ConvertFrom-Json).personal.path; if (Test-Path $personalPath) { return $personalPath } } catch {}
        }
    }
    $DefaultPath = Join-Path $env:USERPROFILE "Dropbox"; if (Test-Path $DefaultPath) { return $DefaultPath }; return ""
}

# --- Inicio del Proceso de Instalaci√≥n ---

# --- A. Ajustar Pol√≠tica de Ejecuci√≥n de PowerShell ---
Write-Host-Color "Ajustando la pol√≠tica de ejecuci√≥n de PowerShell a 'RemoteSigned' para el usuario actual..." Cyan
try {
    Set-ExecutionPolicy -Scope CurrentUser RemoteSigned -Force
    Write-Host-Color "Pol√≠tica de ejecuci√≥n ajustada con √©xito." Green
} catch {
    # Si falla por CUALQUIER motivo (GPO, error de seguridad, etc.), solo muestra una advertencia.
    Write-Host-Color "ADVERTENCIA: No se pudo cambiar la Pol√≠tica de Ejecuci√≥n de PowerShell." Yellow
    Write-Host-Color "No es un problema grave, ya que el Launcher.bat generado se saltar√° esta pol√≠tica." Yellow
    Write-Host-Color "Continuando con la instalaci√≥n..." Yellow
    Start-Sleep -Seconds 3
}


# --- B. Interacci√≥n con el Usuario y Detecci√≥n de Rutas ---

Write-Host-Color "
=== Instalador y Configuraci√≥n de 7DTD Sync Companion ===" Green
Write-Host-Color "Este script configurar√° las herramientas para sincronizar una PARTIDA espec√≠fica de 7 Days to Die con Dropbox." Cyan
Write-Host-Color ""

# --- B1. Detectar y obtener la ruta de Dropbox ---
$DropboxRoot = ""
$DetectedDropboxPath = DetectDropboxRootPath
if ($DetectedDropboxPath) {
    Write-Host-Color "Dropbox detectado en: $DetectedDropboxPath" Green
    $ConfirmDropbox = Read-Host "Es esta la ruta correcta para tu carpeta principal de Dropbox? (S/N) [S]"
    if ($ConfirmDropbox -ne "n" -and $ConfirmDropbox -ne "N") {
        $DropboxRoot = $DetectedDropboxPath
    }
}
while (-not (Test-Path $DropboxRoot)) {
    Write-Host-Color "Por favor, introduce la ruta COMPLETA de tu carpeta principal de Dropbox (ej: C:\Users\TuUsuario\Dropbox)" Yellow
    $DropboxRoot = Read-Host
    if (-not (Test-Path $DropboxRoot)) {
        Write-Host-Color "La ruta introducida no existe o no es v√°lida. Int√©ntalo de nuevo." Red
    }
}
$CloudDir = Join-Path $DropboxRoot "7DTDWorld"
Write-Host-Color "La carpeta ra√≠z de la sincronizaci√≥n ser√°: $CloudDir" Cyan

# --- B2. Obtener el nombre de la PARTIDA a sincronizar ---
Write-Host-Color "
Listando PARTIDAS de 7 Days to Die guardadas localmente..." Cyan
$LocalSavesRoot = Join-Path $env:APPDATA "7DaysToDie\Saves"
$GameFolders = @(Get-ChildItem -Path $LocalSavesRoot -Recurse -Directory -ErrorAction SilentlyContinue | Where-Object { Test-Path (Join-Path $_.FullName "main.ttw") } | Select-Object Name, FullName, @{N="Mundo";E={$_.Parent.Name}})
if ($GameFolders.Count -eq 0) {
    Write-Host-Color "No se encontraron partidas guardadas localmente en $LocalSavesRoot." Yellow
    $PartidaName = Read-Host "Por favor, introduce el nombre exacto de la PARTIDA que deseas sincronizar"
    $MundoPadreDetected = $PartidaName
} else {
    Write-Host-Color "Partidas detectadas:" Cyan
    for ($i = 0; $i -lt $GameFolders.Count; $i++) { Write-Host-Color ("{0,3}. {1} (Mundo: {2})" -f ($i+1), $GameFolders[$i].Name, $GameFolders[$i].Mundo) White }
    $SelectedGame = $null
    while ($SelectedGame -eq $null) {
        $Selection = Read-Host "Introduce el n√∫mero de la partida a sincronizar"
        if (($Selection -as [int]) -and $Selection -gt 0 -and $Selection -le $GameFolders.Count) { $SelectedGame = $GameFolders[$Selection-1] } 
        else { Write-Host-Color "Selecci√≥n no v√°lida. Por favor, introduce un n√∫mero de la lista." Red }
    }
    $PartidaName = $SelectedGame.Name
    $MundoPadreDetected = $SelectedGame.Mundo
}
Write-Host-Color "Partida seleccionada: '$PartidaName' (del mundo '$MundoPadreDetected')" Cyan

# --- C. Crear Estructura de Carpetas en Dropbox ---
Write-Host-Color "
Creando estructura de carpetas en Dropbox..." Cyan
$CloudSavesBaseDir = Join-Path $CloudDir "Saves"; $CloudGeneratedWorldsBaseDir = Join-Path $CloudDir "GeneratedWorlds"; $CloudBackupsDir = Join-Path $CloudDir "Backups"; $CloudScriptsDir = Join-Path $CloudDir "Scripts"
$CloudPartidaFolder = Join-Path $CloudSavesBaseDir $MundoPadreDetected $PartidaName
$CloudGeneratedWorldFolder = Join-Path $CloudGeneratedWorldsBaseDir $MundoPadreDetected
New-Item -ItemType Directory -Path $CloudPartidaFolder -Force | Out-Null
New-Item -ItemType Directory -Path $CloudGeneratedWorldFolder -Force | Out-Null
New-Item -ItemType Directory -Path $CloudBackupsDir -Force | Out-Null
New-Item -ItemType Directory -Path $CloudScriptsDir -Force | Out-Null
Write-Host-Color "Estructura de carpetas creada/verificada." Green

# --- D. Crear y Copiar los Archivos de Configuraci√≥n y Scripts ---
Write-Host-Color "
Generando y copiando archivos de configuraci√≥n y scripts..." Cyan
$IniFilePath = Join-Path $CloudScriptsDir "7DTD-Sync.ini"; $IniContent = @"
CloudDir="$CloudDir"
GameName="$PartidaName"
"@
$IniContent | Set-Content -Path $IniFilePath -Encoding UTF8; Write-Host-Color "Archivo 7DTD-Sync.ini creado." Green
$SyncScriptPath = Join-Path $CloudScriptsDir "7DTD-Sync.ps1"
$7DTD_Sync_PS1_Content | Set-Content -Path $SyncScriptPath -Encoding UTF8; Write-Host-Color "Script 7DTD-Sync.ps1 creado." Green
$LauncherPath = Join-Path $CloudScriptsDir "Launcher.bat"
$Launcher_BAT_Content | Set-Content -Path $LauncherPath -Encoding ASCII; Write-Host-Color "Launcher.bat creado." Green

# --- E. Pasos Finales e Instrucciones para el Usuario ---
Write-Host-Color "
=== Instalaci√≥n Completa ===" -ForegroundColor Green
Write-Host-Color "¬°El sistema 7DTD Sync Companion est√° configurado y listo!" -ForegroundColor Cyan
Write-Host-Color "
Ahora, para jugar, debes usar SIEMPRE el archivo 'Launcher.bat' que se encuentra en:" -Color White
Write-Host-Color "	$CloudScriptsDir\Launcher.bat" -ForegroundColor Yellow
Write-Host-Color "Consejo: Crea un acceso directo a este archivo en tu Escritorio para mayor comodidad." -Color White
Write-Host-Color "
Al ejecutar 'Launcher.bat':" -Color White
Write-Host-Color "1. Descargar√° la √∫ltima versi√≥n de la partida desde Dropbox." -Color Yellow
Write-Host-Color "2. Abrir√° el juego 7 Days to Die." -Color Yellow
Write-Host-Color "3. Cuando cierres el juego, subir√° tu progreso a Dropbox." -Color Yellow
Write-Host-Color "
¬°A disfrutar de tus partidas sincronizadas!" -ForegroundColor Green
Read-Host "Presiona Enter para finalizar."
